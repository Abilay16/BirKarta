import json
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.label import Label
from kivy.uix.screenmanager import ScreenManager, Screen
from kivy.uix.button import Button
from kivy.core.window import Window
from kivy.uix.scrollview import ScrollView
from kivy.uix.widget import Widget
from kivy.graphics import Color, RoundedRectangle
from kivy.uix.behaviors import ButtonBehavior

# Android NFC –∏–º–ø–æ—Ä—Ç—ã
from kivy.utils import platform
if platform == 'android':
    from jnius import autoclass, cast
    from android.permissions import request_permissions, Permission
    from android import activity

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞
Window.clearcolor = (1, 1, 1, 1)

class CardButton(ButtonBehavior, BoxLayout):
    """
    –ö–Ω–æ–ø–∫–∞-–∫–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    """
    def __init__(self, cert, idx, open_callback, **kwargs):
        super().__init__(
            orientation='vertical', 
            size_hint_y=None, 
            spacing=4, 
            padding=[18, 10, 10, 8], 
            **kwargs
        )
        
        # –†–∏—Å—É–µ–º —Ñ–æ–Ω –∫–∞—Ä—Ç–æ—á–∫–∏
        with self.canvas.before:
            Color(0.96, 0.98, 1, 1)  # –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π
            self.bg = RoundedRectangle(radius=[22], pos=self.pos, size=self.size)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞
        self.bind(pos=self._update_bg, size=self._update_bg)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        title_text = cert.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        title = Label(
            text=title_text,
            font_size=15,
            bold=True,
            color=[0, 0, 0, 1],
            halign='left',
            valign='top',
            size_hint_y=None,
            text_size=(Window.width - 110, None)
        )
        title.bind(texture_size=lambda inst, val: setattr(title, 'height', val[1]))
        self.add_widget(title)

        # –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏
        date_issued = cert.get('details', {}).get('–í—ã–¥–∞–Ω–æ', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        self.add_widget(Label(
            text=f"–í—ã–¥–∞–Ω–æ: {date_issued}",
            font_size=14,
            color=[0.2, 0.2, 0.2, 1],
            halign='left',
            valign='middle',
            size_hint_y=None,
            height=22
        ))
        
        # –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ä–æ–∫–∞
        valid_until = cert.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        date_color = self._get_date_color(valid_until)
        self.add_widget(Label(
            text=f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {valid_until}",
            font_size=14,
            color=date_color,
            halign='left',
            valign='middle',
            size_hint_y=None,
            height=22
        ))
        
        self.bind(minimum_height=self.setter('height'))
        self._open_callback = open_callback
        self._cert_index = idx

    def _get_date_color(self, date_str):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç –¥–∞—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
        try:
            from datetime import datetime
            # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥
            cert_date = datetime.strptime(date_str, "%d.%m.%Y")
            today = datetime.now()
            days_left = (cert_date - today).days
            
            if days_left < 0:
                return [1, 0, 0, 1]  # –ö—Ä–∞—Å–Ω—ã–π - –ø—Ä–æ—Å—Ä–æ—á–µ–Ω
            elif days_left < 30:
                return [1, 0.5, 0, 1]  # –û—Ä–∞–Ω–∂–µ–≤—ã–π - —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç
            else:
                return [0.2, 0.2, 0.2, 1]  # –°–µ—Ä—ã–π - –≤—Å–µ –æ–∫
        except:
            return [0.2, 0.2, 0.2, 1]  # –°–µ—Ä—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    def _update_bg(self, *args):
        self.bg.pos = self.pos
        self.bg.size = self.size

    def on_press(self):
        self._open_callback(self._cert_index)

class EmptyStateWidget(BoxLayout):
    """–í–∏–¥–∂–µ—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–æ–≥–¥–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"""
    def __init__(self, **kwargs):
        super().__init__(orientation='vertical', spacing=20, **kwargs)
        
        # –ò–∫–æ–Ω–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –∏–∫–æ–Ω–∫—É)
        icon = Label(
            text="üì±",
            font_size=80,
            size_hint_y=None,
            height=120
        )
        self.add_widget(icon)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        main_text = Label(
            text="–ü–æ–¥–Ω–µ—Å–∏—Ç–µ –∫–∞—Ä—Ç—É –∫ —Ç–µ–ª–µ—Ñ–æ–Ω—É",
            font_size=24,
            bold=True,
            color=[0.3, 0.3, 0.3, 1],
            size_hint_y=None,
            height=40
        )
        self.add_widget(main_text)
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        instruction = Label(
            text="–î–ª—è —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n–ø–æ–¥–Ω–µ—Å–∏—Ç–µ NFC –∫–∞—Ä—Ç—É –∫ –∑–∞–¥–Ω–µ–π\n–ø–∞–Ω–µ–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
            font_size=16,
            color=[0.5, 0.5, 0.5, 1],
            halign='center',
            size_hint_y=None,
            height=80
        )
        self.add_widget(instruction)

class MainScreen(Screen):
    """–ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.data = None
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.main_layout = BoxLayout(
            orientation='vertical', 
            spacing=18, 
            padding=[30, 20, 30, 20]
        )
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        header = BoxLayout(orientation='horizontal', size_hint_y=None, height=50)
        header.add_widget(Label(
            text='–ë—ñ—Ä–ö–∞—Ä—Ç–∞', 
            font_size=28, 
            bold=True, 
            color=[0, 0, 0, 1],
            halign='left'
        ))
        
        # –°—Ç–∞—Ç—É—Å NFC
        self.nfc_status = Label(
            text='NFC –≥–æ—Ç–æ–≤',
            font_size=14,
            color=[0, 0.7, 0, 1],
            halign='right',
            size_hint_x=None,
            width=100
        )
        header.add_widget(self.nfc_status)
        self.main_layout.add_widget(header)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–±—É–¥–µ—Ç –º–µ–Ω—è—Ç—å—Å—è)
        self.content_container = BoxLayout(orientation='vertical')
        self.main_layout.add_widget(self.content_container)
        
        self.add_widget(self.main_layout)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.show_empty_state()

    def show_empty_state(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã"""
        self.content_container.clear_widgets()
        empty_widget = EmptyStateWidget()
        self.content_container.add_widget(empty_widget)

    def show_employee_data(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        if not self.data:
            self.show_empty_state()
            return
            
        self.content_container.clear_widgets()
        
        # –ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        name_label = Label(
            text=self.data.get('fio', '–°–æ—Ç—Ä—É–¥–Ω–∏–∫'),
            font_size=20,
            bold=True,
            color=[0, 0, 0, 1],
            size_hint_y=None,
            height=40
        )
        self.content_container.add_widget(name_label)
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
        cert_count = len(self.data.get('certs', []))
        count_label = Label(
            text=f"–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: {cert_count}",
            font_size=16,
            color=[0.5, 0.5, 0.5, 1],
            size_hint_y=None,
            height=30
        )
        self.content_container.add_widget(count_label)
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—ã–π —Å–ø–∏—Å–æ–∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
        scroll = ScrollView()
        rows = BoxLayout(
            orientation='vertical', 
            spacing=18, 
            size_hint_y=None, 
            padding=[0, 10, 0, 10]
        )
        rows.bind(minimum_height=rows.setter('height'))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
        certificates = self.data.get('certs', [])
        for idx, cert in enumerate(certificates):
            card = CardButton(cert, idx, self.open_detail)
            rows.add_widget(card)
        
        scroll.add_widget(rows)
        self.content_container.add_widget(scroll)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        clear_button = Button(
            text="–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
            size_hint_y=None,
            height=40,
            background_color=[0.8, 0.8, 0.8, 1]
        )
        clear_button.bind(on_press=self.clear_data)
        self.content_container.add_widget(clear_button)

    def set_data(self, data):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        self.data = data
        if data:
            self.show_employee_data()
            self.nfc_status.text = '–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'
            self.nfc_status.color = [0, 0.7, 0, 1]
        else:
            self.show_empty_state()
            self.nfc_status.text = 'NFC –≥–æ—Ç–æ–≤'
            self.nfc_status.color = [0, 0.7, 0, 1]

    def clear_data(self, *args):
        """–û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        self.set_data(None)

    def open_detail(self, cert_index):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ"""
        if not self.data:
            return
            
        certificates = self.data.get('certs', [])
        if 0 <= cert_index < len(certificates):
            app = App.get_running_app()
            app.show_detail(certificates[cert_index])

class DetailScreen(Screen):
    """–≠–∫—Ä–∞–Ω —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ"""
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.layout = BoxLayout(orientation='vertical', spacing=10, padding=24)
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        self.title_label = Label(
            text='',
            font_size=20,
            bold=True,
            color=[0, 0.3, 1, 1],
            halign='center',
            valign='middle',
            text_size=(Window.width - 80, None),
            size_hint_y=None
        )
        self.title_label.bind(texture_size=lambda inst, val: setattr(self.title_label, 'height', val[1]))
        self.layout.add_widget(self.title_label)
        
        # –î–∞—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è
        self.date_label = Label(
            text='',
            font_size=16,
            bold=True,
            color=[0, 0, 0, 1],
            size_hint_y=None,
            height=28
        )
        self.layout.add_widget(self.date_label)
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å —Å –¥–µ—Ç–∞–ª—è–º–∏
        scroll = ScrollView()
        self.details_box = BoxLayout(
            orientation='vertical', 
            spacing=6, 
            size_hint_y=None
        )
        self.details_box.bind(minimum_height=self.details_box.setter('height'))
        scroll.add_widget(self.details_box)
        self.layout.add_widget(scroll)
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        back_btn = Button(
            text="–ù–∞–∑–∞–¥",
            size_hint_y=None,
            height=45,
            background_color=[0, 0.3, 1, 1],
            color=[1, 1, 1, 1]
        )
        back_btn.bind(on_press=self.go_back)
        self.layout.add_widget(back_btn)
        
        self.add_widget(self.layout)

    def set_certificate(self, cert):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        # –ù–∞–∑–≤–∞–Ω–∏–µ
        cert_name = cert.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        self.title_label.text = cert_name
        
        # –î–∞—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ä–æ–∫–∞
        valid_date = cert.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        date_status = self._get_date_status(valid_date)
        self.date_label.text = f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {valid_date} {date_status}"
        
        # –¶–≤–µ—Ç –¥–∞—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        if "–ü–†–û–°–†–û–ß–ï–ù" in date_status:
            self.date_label.color = [1, 0, 0, 1]  # –ö—Ä–∞—Å–Ω—ã–π
        elif "—Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç" in date_status:
            self.date_label.color = [1, 0.5, 0, 1]  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
        else:
            self.date_label.color = [0, 0.7, 0, 1]  # –ó–µ–ª–µ–Ω—ã–π
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–µ—Ç–∞–ª–∏
        self.details_box.clear_widgets()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        details = cert.get('details', {})
        for key, value in details.items():
            detail_label = Label(
                text=f"{key}: {value}",
                font_size=15,
                color=[0, 0, 0, 1],
                halign='left',
                valign='top',
                size_hint_y=None,
                text_size=(Window.width - 80, None)
            )
            detail_label.bind(texture_size=lambda inst, val: setattr(detail_label, 'height', val[1]))
            self.details_box.add_widget(detail_label)

    def _get_date_status(self, date_str):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –ø–æ –¥–∞—Ç–µ"""
        try:
            from datetime import datetime
            cert_date = datetime.strptime(date_str, "%d.%m.%Y")
            today = datetime.now()
            days_left = (cert_date - today).days
            
            if days_left < 0:
                return "- –ü–†–û–°–†–û–ß–ï–ù!"
            elif days_left < 30:
                return f"- —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç ({days_left} –¥–Ω.)"
            else:
                return "- –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω"
        except:
            return ""

    def go_back(self, *args):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω"""
        self.manager.current = 'main'

class BirKartaApp(App):
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    def build(self):
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —ç–∫—Ä–∞–Ω–æ–≤
        self.sm = ScreenManager()
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫—Ä–∞–Ω—ã
        self.main_screen = MainScreen(name='main')
        self.detail_screen = DetailScreen(name='detail')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω—ã –≤ –º–µ–Ω–µ–¥–∂–µ—Ä
        self.sm.add_widget(self.main_screen)
        self.sm.add_widget(self.detail_screen)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è Android
        if platform == 'android':
            try:
                request_permissions([Permission.NFC])
                activity.bind(on_new_intent=self.on_new_intent)
                print("NFC –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å NFC
                self.main_screen.nfc_status.text = 'NFC –∞–∫—Ç–∏–≤–µ–Ω'
                self.main_screen.nfc_status.color = [0, 0.7, 0, 1]
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ NFC: {e}")
                self.main_screen.nfc_status.text = 'NFC –æ—à–∏–±–∫–∞'
                self.main_screen.nfc_status.color = [1, 0, 0, 1]
        else:
            # –ù–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ NFC –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            self.main_screen.nfc_status.text = '–¢–æ–ª—å–∫–æ Android'
            self.main_screen.nfc_status.color = [0.5, 0.5, 0.5, 1]
        
        return self.sm

    def show_detail(self, certificate):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ"""
        self.detail_screen.set_certificate(certificate)
        self.sm.current = 'detail'

    def on_new_intent(self, intent):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ NFC —Å–æ–±—ã—Ç–∏–π
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω —Å—á–∏—Ç—ã–≤–∞–µ—Ç NFC –∫–∞—Ä—Ç—É
        """
        if platform != 'android':
            return
        
        try:
            print("NFC —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            self.main_screen.nfc_status.text = '–°—á–∏—Ç—ã–≤–∞–Ω–∏–µ...'
            self.main_screen.nfc_status.color = [1, 0.5, 0, 1]  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Android –∫–ª–∞—Å—Å—ã
            Intent = autoclass('android.content.Intent')
            NfcAdapter = autoclass('android.nfc.NfcAdapter')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
            action = intent.getAction()
            valid_actions = [
                NfcAdapter.ACTION_NDEF_DISCOVERED,
                NfcAdapter.ACTION_TAG_DISCOVERED,
                NfcAdapter.ACTION_TECH_DISCOVERED
            ]
            
            if action not in valid_actions:
                print(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ NFC –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
                self.main_screen.nfc_status.text = '–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞'
                self.main_screen.nfc_status.color = [1, 0, 0, 1]
                return

            # –ü–æ–ª—É—á–∞–µ–º NDEF —Å–æ–æ–±—â–µ–Ω–∏—è
            raw_msgs = intent.getParcelableArrayExtra(NfcAdapter.EXTRA_NDEF_MESSAGES)
            if raw_msgs is None:
                print("–ù–µ—Ç NDEF —Å–æ–æ–±—â–µ–Ω–∏–π")
                self.main_screen.nfc_status.text = '–ü—É—Å—Ç–∞—è –∫–∞—Ä—Ç–∞'
                self.main_screen.nfc_status.color = [1, 0, 0, 1]
                return

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ NdefMessage –æ–±—ä–µ–∫—Ç—ã
            messages = [cast('android.nfc.NdefMessage', msg) for msg in raw_msgs]
            if not messages:
                print("–ü—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
                self.main_screen.nfc_status.text = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
                self.main_screen.nfc_status.color = [1, 0, 0, 1]
                return

            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            records = messages[0].getRecords()
            if not records or records.length == 0:
                print("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
                self.main_screen.nfc_status.text = '–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π'
                self.main_screen.nfc_status.color = [1, 0, 0, 1]
                return

            first_record = records[0]
            payload = first_record.getPayload()
            if payload is None:
                print("–ü—É—Å—Ç–æ–π payload")
                self.main_screen.nfc_status.text = '–ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ'
                self.main_screen.nfc_status.color = [1, 0, 0, 1]
                return

            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º NDEF Text Record
            status_byte = payload[0] & 0xFF
            language_length = status_byte & 0x3F
            is_utf16 = (status_byte & 0x80) != 0
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
            text_bytes = payload[1 + language_length:]
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            encoding = 'utf-16' if is_utf16 else 'utf-8'
            try:
                text_data = bytes(text_bytes).decode(encoding)
            except UnicodeDecodeError:
                text_data = bytes(text_bytes).decode('utf-8', errors='ignore')

            print(f"–°—á–∏—Ç–∞–Ω —Ç–µ–∫—Å—Ç —Å NFC: {text_data[:100]}...")

            # –ü–∞—Ä—Å–∏–º JSON
            try:
                worker_data = json.loads(text_data)
                print("JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
                if not isinstance(worker_data, dict):
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
                
                if 'fio' not in worker_data:
                    raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –§–ò–û")
                
                if 'certs' not in worker_data:
                    raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
                self.main_screen.set_data(worker_data)
                self.sm.current = 'main'
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                self.main_screen.nfc_status.text = '–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'
                self.main_screen.nfc_status.color = [0, 0.7, 0, 1]
                
                print(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è: {worker_data.get('fio', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                
            except json.JSONDecodeError as e:
                print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                print(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text_data}")
                self.main_screen.nfc_status.text = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç'
                self.main_screen.nfc_status.color = [1, 0, 0, 1]
                
            except ValueError as e:
                print(f"–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
                self.main_screen.nfc_status.text = str(e)
                self.main_screen.nfc_status.color = [1, 0, 0, 1]

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ NFC: {e}")
            import traceback
            traceback.print_exc()
            self.main_screen.nfc_status.text = '–û—à–∏–±–∫–∞ NFC'
            self.main_screen.nfc_status.color = [1, 0, 0, 1]

if __name__ == '__main__':
    BirKartaApp().run()
